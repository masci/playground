"""
A classic problem for computer science algorithms is calculating the 
minimum/maximum weight in a triangle of numbers.

Observe the triangle below. Calculate the minimum weight in the below 25 row 
triangle from the top row to the bottom row:

14 75 98 19 34 63 50 72 65 57 84 19 100 02 46 05 19 41 99 83 71 07 23 55 07 
18 93 84 29 68 30 22 75 95 38 42 35 53 21 71 03 77 24 37 77 12 65 40 11 50 
37 83 83 16 94 16 75 19 10 59 20 61 07 18 44 45 44 32 34 30 100 42 18 83 82 
99 14 72 22 84 17 42 16 96 39 90 99 78 50 65 15 85 96 39 100 66 93 64 52 40 
79 65 48 61 97 29 64 57 50 29 44 08 33 01 38 06 71 79 83 18 03 55 94 33 41 
34 85 16 69 09 22 68 51 06 45 23 14 61 57 63 90 56 28 29 99 41 89 08 80 9 37 
44 04 62 54 34 92 99 53 60 26 24 26 59 74 13 50 57 83 48 93 14 01 31 58 02 
35 04 20 100 05 91 71 75 75 38 16 30 80 28 49 43 78 53 61 37 50 35 36 78 46 
30 32 96 80 61 93 84 17 07 27 65 34 45 34 07 46 99 10 64 74 20 85 33 22 60 
62 98 38 83 15 59 97 50 23 46 90 26 30 34 56 22 47 63 16 28 93 65 63 33 45 
59 21 40 36 21 34 32 17 69 15 77 54 87 10 30 100 48 47 30 77 49 02 45 02 98 
02 95 02 81 71 71 02 41 37 70 15 11 26 58 34 56 19 78 26 11 55 56 49 39 100 
06 97 60 90 96 22 70 25 66 70 30 70 78 08 93 71 77 26 28 42 38 33 94 82

Enter the answer which is the minimum weight in the above triangle.
"""

data = [int(x) for x in """14 75 98 19 34 63 50 72 65 57 84 19 100 02 46 05 
19 41 99 83 71 07 23 55 07 18 93 84 29 68 30 22 75 95 38 42 35 53 21 71 03 
77 24 37 77 12 65 40 11 50 37 83 83 16 94 16 75 19 10 59 20 61 07 18 44 45 
44 32 34 30 100 42 18 83 82 99 14 72 22 84 17 42 16 96 39 90 99 78 50 65 15 
85 96 39 100 66 93 64 52 40 79 65 48 61 97 29 64 57 50 29 44 08 33 01 38 06 
71 79 83 18 03 55 94 33 41 34 85 16 69 09 22 68 51 06 45 23 14 61 57 63 90 
56 28 29 99 41 89 08 80 9 37 44 04 62 54 34 92 99 53 60 26 24 26 59 74 13 50 
57 83 48 93 14 01 31 58 02 35 04 20 100 05 91 71 75 75 38 16 30 80 28 49 43 
78 53 61 37 50 35 36 78 46 30 32 96 80 61 93 84 17 07 27 65 34 45 34 07 46 
99 10 64 74 20 85 33 22 60 62 98 38 83 15 59 97 50 23 46 90 26 30 34 56 22 
47 63 16 28 93 65 63 33 45 59 21 40 36 21 34 32 17 69 15 77 54 87 10 30 100 
48 47 30 77 49 02 45 02 98 02 95 02 81 71 71 02 41 37 70 15 11 26 58 34 56 
19 78 26 11 55 56 49 39 100 06 97 60 90 96 22 70 25 66 70 30 70 78 08 93 71 
77 26 28 42 38 33 94 82
""".split(" ")]

MAX_VAL=max(data)**10

rows = []
last=0
for i in xrange(1,26):
    rows.append( data[last:i+last] )
    last+=i

costs = {}

def min_cost(row,col):
    if col<0 or col>len(rows[row-1]):
        return MAX_VAL
    
    if row == 0:
        return rows[0][0]
    
    if (row,col) in costs:
        return costs[(row,col)]
    
    c = min( [min_cost(row-1, col-1), min_cost(row-1, col) ] ) + \
        rows[row][col]
    costs[(row,col)] = c
    return c

res = []
for i in xrange(len(rows[-1])):
    res.append(min_cost(len(rows)-1, i))

print min(res)
